### YamlMime:Tutorial
title: Resource index for bot apps
metadata:
  title: Resource index for bot apps
  description: This resource index includes a list of activity handlers, events, and status codes from bot conversational APIs.
  audience: Developer
  level: Beginner
  ms.date: 09/26/2024
  ms.topic: interactive-tutorial
  nextTutorialHref: ~/bots/overview.md
  nextTutorialTitle: Back to Bot overview
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |

    This index includes activity handlers, events, and status codes from bot conversational APIs. 
    The code snippets supported are for C#, JavaScript, and Python. 

- title: Teams activity handlers
  durationInMinutes: 1
  content: |

   Teams activity handler is derived from Microsoft Bot Framework's activity handler. It routes all Teams activities before allowing any non-Teams specific activities to be handled.

    # [C#](#tab/csharp)

    The code snippets for Teams activity handlers:

    `OnTeamsChannelCreatedAsync`

    ```csharp

    protected override Task OnTeamsChannelCreatedAsync(ChannelInfo channelInfo, TeamInfo teamInfo, ITurnContext<IConversationUpdateActivity> turnContext, CancellationToken cancellationToken)
            {
                // Code logic here
            }
    ```

    `OnTeamsChannelDeletedAsync`

    ```csharp

    protected override Task OnTeamsChannelDeletedAsync(ChannelInfo channelInfo, TeamInfo teamInfo, ITurnContext<IConversationUpdateActivity> turnContext, CancellationToken cancellationToken)
            {
                // Code logic here
            }
    ```

    `OnTeamsChannelRenamedAsync`

    ```csharp

    protected override Task OnTeamsChannelRenamedAsync(ChannelInfo channelInfo, TeamInfo teamInfo, ITurnContext<IConversationUpdateActivity> turnContext, CancellationToken cancellationToken)
      {
      // Code logic here
      }
    ```

    `OnTeamsTeamRenamedAsync`

    ```csharp

    protected override Task OnTeamsTeamRenamedAsync(TeamInfo teamInfo, ITurnContext<IConversationUpdateActivity> turnContext, CancellationToken cancellationToken)
      {
      // Code logic here
      }
    ```

    `OnTeamsMembersAddedAsync`

    ```csharp

    protected override Task OnTeamsMembersAddedAsync(IList<TeamsChannelAccount> teamsMembersAdded, TeamInfo teamInfo, ITurnContext<IConversationUpdateActivity> turnContext, CancellationToken cancellationToken)
      {
      // Code logic here
      }
    ```

    `OnTeamsMembersRemovedAsync`

    ```csharp

    protected override Task OnTeamsMembersRemovedAsync(IList<TeamsChannelAccount> teamsMembersRemoved, TeamInfo teamInfo, ITurnContext<IConversationUpdateActivity> turnContext, CancellationToken cancellationToken);
      {
      // Code logic here
      }
    ```

    `OnTeamsMessageEditAsync`

    ```csharp
    protected override async Task OnTeamsMessageEditAsync(ITurnContext<IMessageUpdateActivity> turnContext, CancellationToken cancellationToken)
      { 
      // Code logic here 
      } 
    ```

    `OnTeamsMessageUndeleteAsync`

    ```csharp
    protected override async Task OnTeamsMessageUndeleteAsync(ITurnContext<IMessageUpdateActivity> turnContext, CancellationToken cancellationToken)
      { 
      // Code logic here 
      } 
    ```

    `OnTeamsMessageSoftDeleteAsync`

    ```csharp
    protected override async Task OnTeamsMessageSoftDeleteAsync(ITurnContext<IMessageDeleteActivity> turnContext, CancellationToken cancellationToken)
      { 
      // Code logic here 
      } 
    ```

    # [JavaScript](#tab/javascript)

    The code snippets for Teams activity handlers:

    `onTeamsChannelCreated`

    ```javascript

    onTeamsChannelCreated(async (channelInfo, teamInfo, context, next) => {
          // code for handling
            await next()
        });
    ```

    `onTeamsChannelDeleted`

    ```javascript

    onTeamsChannelDeleted(async (channelInfo, teamInfo, context, next) => {
          // code for handling
          await next()
        });
    ```

    `onTeamsChannelRenamed`

    ```javascript

    onTeamsChannelRenamed(async (channelInfo, teamInfo, context, next) => {
          // code for handling
          await next()
        });
    ```

    `onTeamsTeamRenamed`

    ```javascript

    onTeamsTeamRenamedAsync(async (teamInfo, context, next) => {
          // code for handling
          await next()
        });
    ```

    `onTeamsMembersAdded`

    ```javascript

    onTeamsMembersAdded(async (membersAdded, teamInfo, context, next) => {
          // code for handling
        await next();
        });
    ```

    `onTeamsMembersRemoved`

    ```javascript

    onTeamsMembersRemoved(async (membersRemoved, teamInfo, context, next) => {
          // code for handling
        await next();
        });
    ```

    # [Python](#tab/python)

    Bots are created using the Bot Framework. If the bots receive a message activity, then the turn handler receives a notification of that incoming activity. The turn handler then sends the incoming activity to the `on_message_activity` activity handler. In Teams, this functionality remains the same. If the bot receives a conversation update activity, then the turn handler receives a notification of that incoming activity and sends the incoming activity to `on_conversation_update_activity`. The Teams activity handler first checks for any Teams specific events. If no events are found, it then passes them along to the Bot Framework's activity handler.

    In the Teams activity handler class, there are two primary Teams activity handlers, `on_conversation_update_activity` and `on_invoke_activity`. `on_conversation_update_activity` routes all conversation update activities and `on_invoke_activity` routes all Teams invoke activities.

    To implement your logic for Teams specific activity handlers, you must override the methods in your bot as shown in the [**bot logic**] section. There's no base implementation for these handlers. Therefore, add the logic that you want in your override.

    ---

- title: Core Bot Framework handlers
  durationInMinutes: 1
  content: |

    The bot logic processes incoming activities from one or more of your bot channels and in response generates outgoing activities. It's still true of bots derived from the Teams activity handler class, which first checks for Teams activities. After checking for Teams activities, it passes all other activities to the Bot Framework's activity handler.

    # [C#](#tab/csharp)

    #### Core Bot Framework handlers

    >[!NOTE]
    >
    >* Except for the **added** and **removed** members' activities, all the activity handlers described in this section continue to work as they do with a non-Teams bot.
    >* `onInstallationUpdateActivityAsync()` method is used to get Teams Locale while adding the bot to Teams.

    Activity handlers are different in context of a team, where a new member is added to the team instead of a message thread.

    The list of handlers defined in `ActivityHandler` includes the following events:

    | Event | Handler | Description |
    | :-- | :-- | :-- |
    | Any activity type received | `OnTurnAsync` | This method calls one of the other handlers, based on the type of activity received. |
    | Message activity received | `OnMessageActivityAsync` | You can override this method to handle a `Message` activity. |
    | Message update activity received | `OnMessageUpdateActivityAsync` | You can override this method to handle a message update activity. |
    | Message delete activity received | `OnMessageDeleteActivityAsync` | You can override this method to handle a message delete activity. |
    | Conversation update activity received | `OnConversationUpdateActivityAsync` | This method calls a handler if members other than the bot joined or left the conversation, on a `ConversationUpdate` activity. |
    | Non-bot members joined the conversation | `OnMembersAddedAsync` | This method can be overridden to handle members joining a conversation. |
    | Non-bot members left the conversation | `OnMembersRemovedAsync` | This method can be overridden to handle members leaving a conversation. |
    | Event activity received | `OnEventActivityAsync` | This method calls a handler specific to the event type, on an `Event` activity. |
    | Token-response event activity received | `OnTokenResponseEventAsync` | This method can be overridden to handle token response events. |
    | Non-token-response event activity received | `OnEventAsync` | This method can be overridden to handle other types of events. |
    | Other activity type received | `OnUnrecognizedActivityTypeAsync` | This method can be overridden to handle any activity type otherwise unhandled. |  
    